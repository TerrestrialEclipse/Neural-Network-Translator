using Tensor;
using NUnit.Framework;

namespace NeuralNetwork_iTests
{
    [TestFixture]
    public class TensorflowComparisonTests
    {
        [Test]
        public void NeuralNetwork_avgPool1d2_returnsSameResultAsTensorflow()
        {
            int batchSize = 32;
            int[] inputShape = { batchSize, 5, 1 };
            var input = new Tensor<double>(new double[] {-0.88948492,  0.9266185 , -0.78068752, -1.05302809,  0.5487588 ,
                                                         -0.43058864,  0.5772626 ,  2.18103054,  0.68330074,  0.11384662,
                                                         -1.51834655,  0.39338661, -0.73989191,  0.59889572,  1.39420373,
                                                          1.62761302,  0.31247087, -0.62950797, -0.62453136,  0.70831918,
                                                          1.12416792, -0.71263546, -0.69947717,  0.38295282, -1.01584576,
                                                         -1.00081803, -0.07344025,  1.26782764,  0.78885268, -0.94645885,
                                                          0.68989803, -1.08600283, -2.36134783,  0.68985695,  1.3941294 ,
                                                         -0.90986848, -2.60152147, -0.39291814, -0.1707793 , -2.22401981,
                                                         -0.30930043, -0.17314914, -0.41804612,  0.44706621, -0.80066369,
                                                          0.78764738,  0.01957331,  0.84275454,  0.30134943,  1.03551322,
                                                          0.97813151, -1.79995474, -0.092114  , -0.08195359,  0.22647762,
                                                          0.8114259 ,  1.20532175, -0.39779814,  0.06571645,  1.83055987,
                                                          0.08936274,  0.72261536,  0.43291354, -1.11608835, -0.3601982 ,
                                                          1.38884772, -0.27966993,  1.85820337, -0.0551839 ,  0.19181139,
                                                         -0.18049204,  0.43085942, -0.34160195,  0.64604048,  1.17832201,
                                                         -0.57175789,  0.05269491,  0.57283861, -1.32689755,  1.88217764,
                                                         -1.88413671, -1.52750881, -0.87345869,  0.55348781, -0.54200823,
                                                         -0.16369699, -1.41185854,  0.18460829, -1.48284019, -1.44347558,
                                                          0.84387357, -1.16098603, -2.59353645,  0.16025817,  1.23915112,
                                                         -1.03396588, -0.88411012,  0.62687378,  1.13582557,  0.67557029,
                                                         -1.08890488, -0.86516626,  1.51503736, -0.02638403,  0.61536096,
                                                         -1.41139317, -0.70535512,  0.38755078, -0.37301142,  0.67055805,
                                                         -0.38507912,  0.48903896, -1.59901989, -0.07800988,  0.28456811,
                                                         -0.24594061,  0.94872227, -0.05677852, -1.74661694, -1.51515973,
                                                         -0.23040294,  0.43392762, -0.10212812, -0.16104189,  0.29787965,
                                                          1.51279794,  2.19060681, -0.33010425, -1.44290882, -0.90713671,
                                                          0.04828433, -0.10155463, -0.14713118,  1.39278802, -1.68560085,
                                                          0.51779565,  1.26344855,  0.57317844, -1.34103686,  0.1830239 ,
                                                         -0.11302457,  0.54865036, -0.28687714,  1.17220688, -0.53739737,
                                                         -0.1188761 ,  0.87942097, -0.8614098 ,  0.54538832,  1.1264245 ,
                                                          0.35264062,  1.46683544,  1.22899533,  1.70194495, -0.29976239,
                                                          1.30328293,  0.65422441, -1.41425686,  0.04768148,  0.6885071 });
            input = input.reshape(inputShape);
            var expected = new Tensor<double>(new double[] {  0.01856679, -0.3023657 , -0.25213465,  0.07333697,  1.147198  ,
                                                              0.39857367, -0.56248   ,  0.08413015,  0.9965497 ,  0.970042  ,
                                                             -0.31385615,  0.0418939 ,  0.20576623, -0.3430533 , -0.31644648,
                                                             -0.5371291 ,  0.66108006, -0.07880309, -0.1980524 , -0.9191646 ,
                                                              1.0419931 , -1.755695  , -1.0550729 , -1.1973995 , -0.24122478,
                                                             -0.048043  , -0.17679875,  0.40361035,  0.38789245,  0.6684313 ,
                                                             -0.41091162, -0.65800744,  0.07226202,  1.0083739 ,  0.29108003,
                                                              0.9481382 ,  0.40598905,  0.01314684, -0.7381433 ,  0.5545889 ,
                                                              0.5077832 ,  0.06831374,  0.12518369,  0.24509932,  0.91218126,
                                                             -0.2595315 , -0.233788  ,  0.27764004, -1.7058227 , -0.6158266 ,
                                                              0.00573981, -0.7877778 , -0.90336347, -1.4631579 , -0.15855625,
                                                             -1.198088  ,  0.69970465, -0.95903796,  0.29286307,  0.90569794,
                                                             -0.9770355 ,  0.20782904,  0.29448846, -1.0583742 , -0.23027192,
                                                              0.14877331,  0.05197993, -0.39599693,  0.10327911,  0.3513908 ,
                                                             -0.2848911 , -1.6308883 ,  0.10176234,  0.05691921,  0.06841888,
                                                              1.8517025 ,  0.13919795, -1.1750227 , -0.02663515,  0.38136742,
                                                             -0.14640641,  0.89062214,  0.1651967 , -0.5790065 ,  0.21781291,
                                                              0.47799337,  0.31740475,  0.38027245,  0.18779986,  0.83590645,
                                                              0.90973806,  1.4659252 ,  0.7010913 ,  0.9787537 , -0.23745032,
                                                              0.36809427});
            expected = expected.reshape(32, 3, 1);

            var networkBuilder = new avg_pool_1d_2();
            var network = networkBuilder.NeuralNetwork;
            var result = network.predict(input);

            Assert.That(result, Is.EqualTo(expected));
        }
    }
}
